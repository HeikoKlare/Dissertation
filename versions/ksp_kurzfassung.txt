During the development of complex software systems, stakeholders specify their concerns in different artifacts, such as code, design diagrams, or deployment descriptions.
Due to redundancies between such artifacts, ensuring that they describe the system in a consistent way is crucial. 
Transformations are well-suited to automate the process of preserving consistency for pairs of artifacts upon changes in one of them.

In this thesis, we investigate how developers can combine independently developed and reusable transformations to networks such that they preserve consistency between more than two artifacts.
From a formal definition of these networks, we derive synchronization, compatibility, and orchestration as central challenges, and we develop approaches to solve them.
In addition, we propose a construction approach to mitigate trade-offs between quality properties of networks, such as their maintainability, and a language that supports developers in applying the approach.
