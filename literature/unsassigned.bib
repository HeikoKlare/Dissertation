% FROM VOSE 2019 COMMONALITIES-PAPER

@inproceedings{heidenreich2010composition,
  abstract  = {Model transformations are at the heart of Model-Driven Software Development (MDSD) and, once composed in transformation chains to MDSD processes, allow for the development of complex systems and their automated derivation. While there already exist various approaches to specify and execute such MDSD processes, only few of them draw focus on ensuring the validity of the transformation chains, and thus, safe composition of transformations. In this paper, we present the TraCo composition system, which overcomes these limitations and evaluate and discuss the approach based on two case studies.},
  address   = {Berlin, Heidelberg},
  author    = {Heidenreich, Florian and Kopcsek, Jan and A{\ss}mann, Uwe},
  booktitle = {Theory and Practice of Model Transformations},
  editor    = {Tratt, Laurence and Gogolla, Martin},
  isbn      = {978-3-642-13688-7},
  pages     = {108--122},
  publisher = {Springer Berlin Heidelberg},
  title     = {{Safe Composition of Transformations}},
  year      = {2010}
}

@article{lano2014a,
  abstract = {Model transformations are an essential part of model-based development approaches, such as Model-driven Architecture (MDA) and Model-driven Development (MDD). Model transformations are used to refine and abstract models, to re-express models in a new modelling language, and to analyse, refactor, compare and improve models. Therefore, the correctness of model transformations is critically important for successful application of model-based development: software developers should be able to rely upon the correct processing of their models by transformations in the same way that they rely upon compilers to produce correct executable versions of their programs. In this paper, we address this problem by defining standard structures for model transformation specifications and implementations, which serve as patterns and strategies for constructing a wide range of model transformations. These are incorporated into a tool-supported process which automatically synthesises implementations of model transformations from their specifications, these implementations are correct-by-construction with respect to their specifications.},
  author   = {Lano, K and Kolahdouz-Rahimi, S and Poernomo, I and Terrell, J and Zschaler, S},
  doi      = {10.1007/s10270-012-0291-7},
  issn     = {1619-1374},
  journal  = {Software {\&} Systems Modeling},
  number   = {2},
  pages    = {873--907},
  title    = {{Correct-by-construction synthesis of model transformations using transformation patterns}},
  url      = {https://doi.org/10.1007/s10270-012-0291-7},
  volume   = {13},
  year     = {2014}
}

@inproceedings{pilgrim2008a,
  abstract  = {Model transformations can be defined by a chain or network of sub-transformations, each fulfilling a specific task. Many intermediate models, possibly accompanied by traceability models, are thus generated before reaching the final target(s). There is a need for tools that assist the developer in managing and interpreting this growing amount of MDD artifacts. In this paper we first discuss how a transformation chain can be modeled and executed in a transformation language independent way. We then explore how the available traceability information can be used to generate suitable diagrams for all intermediate and final models. We also propose a technique to visualize all the diagrams along with their traceability information in a single view by using a 3D diagram editor. Finally, we present an example transformation chain that has been modeled, executed and visualized using our tools.},
  address   = {Berlin, Heidelberg},
  author    = {von Pilgrim, Jens and Vanhooff, Bert and Schulz-Gerlach, Immo and Berbers, Yolande},
  booktitle = {Model Driven Architecture -- Foundations and Applications},
  editor    = {Schieferdecker, Ina and Hartman, Alan},
  isbn      = {978-3-540-69100-6},
  pages     = {17--32},
  publisher = {Springer Berlin Heidelberg},
  title     = {{Constructing and Visualizing Transformation Chains}},
  year      = {2008}
}

@article{yie2012a,
  abstract = {A single Model Transformation Chain (MTC) takes a high-level input model rooted in the problem domain and through one or more transformation steps produces a low-level output model rooted in the solution domain. To build a single ``almighty'' MTC that is in charge of every design, implementation and specific platform concern is a complex task. Instead, we can use several smaller MTCs that are easier to develop and maintain, because each MTC is independently developed focusing on a specific concern. However, the MTCs must interoperate to produce complete applications; this inherently creates dependencies between them, because each MTC generates a part of the final low-level model. In this paper, we propose an external and explicit mechanism to track dependencies between the MTCs (i.e., the MTCs are oblivious to the mechanism), which is used to automatically derive correspondence relationships between the final models generated by each MTC. The contribution of our mechanism is the reduction of complexity of building interoperable MTCs because the derived correspondences are resolved after the transformations execution, in the solution domain where the semantics of every concept is well-defined. The resolution process consists of (1) checking the consistency between the models, (2) producing communication bridges or (3) guiding the composition of the models. This paper presents three case studies to illustrate the derivation and resolution of correspondence relationships through the MTCs.},
  author   = {Yie, Andr{\'{e}}s and Casallas, Rubby and Deridder, Dirk and Wagelaar, Dennis},
  doi      = {10.1007/s10270-010-0179-3},
  issn     = {1619-1374},
  journal  = {Software {\&} Systems Modeling},
  month    = feb,
  number   = {1},
  pages    = {55--75},
  title    = {{Realizing Model Transformation Chain interoperability}},
  url      = {https://doi.org/10.1007/s10270-010-0179-3},
  volume   = {11},
  year     = {2012}
}

@inproceedings{yie2009a,
  abstract  = {A transformation chain (TC) generates applications from high-level models that are defined in terms of problem domain concepts. The result is a low-level model that is rooted in the solution domain. The evolution of a TC is a complex and expensive endeavor since there are intricate dependencies between all its constituent parts. More specific, an evolution problem arises when we need to add an unanticipated concern (e.g., security) that does not fit the expressiveness of the high-level metamodel, because such an addition forces us to adapt existing assets (i.e., metamodels, models, and transformations). We present a solution that adds a new concern model to the TC, in an independent way.},
  address   = {Berlin, Heidelberg},
  author    = {Yie, Andr{\'{e}}s and Casallas, Rubby and Wagelaar, Dennis and Deridder, Dirk},
  booktitle = {Model Driven Engineering Languages and Systems},
  editor    = {Sch{\"{u}}rr, Andy and Selic, Bran},
  isbn      = {978-3-642-04425-0},
  pages     = {551--555},
  publisher = {Springer Berlin Heidelberg},
  title     = {{An Approach for Evolving Transformation Chains}},
  year      = {2009}
}

@inproceedings{stevens2018megamodels,
  abstract  = {The model-driven development of systems involves multiple models, metamodels and transformations. Transformations – which may be bidirectional – specify, and provide means to enforce, desired “consistency” relationships between models. We can describe the whole configuration using a megamodel. As development proceeds, and various models are modified, we need to be able to restore consistency in the megamodel, so that the consequences of decisions first recorded in one model are appropriately reflected in the others. At the same time, we need to minimise the amount of recomputation needed; in particular, we would like to avoid reapplying a transformation when no relevant changes have occurred in the models it relates. In general, however, different results are obtained depending on which models are allowed to be modified and on the order and direction of transformation application. In this paper we propose using an orientation model to make important choices explicit. We explain the relationship between software build systems and the megamodel consistency problem. We show how to extend the formalised build system pluto to provide a means of restoring consistency in a megamodel that is, in appropriate senses, flexible, sound and optimal.},
  author    = {Stevens, Perdita},
  booktitle = {Proceedings of the 21th ACM/IEEE International Conference on Model Driven Engineering Languages and Systems},
  doi       = {10.1145/3239372.3239378},
  isbn      = {978-1-4503-4949-9},
  pages     = {301--311},
  publisher = {ACM},
  title     = {{Towards sound, optimal, and flexible building from megamodels}},
  year      = {2018}
}

@article{macedo2017a,
  author   = {Macedo, Nuno and Jorge, Tiago and Cunha, Alcino},
  doi      = {10.1109/TSE.2016.2620145},
  issn     = {0098-5589},
  journal  = {IEEE Transactions on Software Engineering},
  keywords = {Consistency Management,Context,Feature extraction,Inconsistency Handling,Maintenance engineering,Model Repair,Model-driven Engineering,Software engineering,Systematics,Taxonomy,Unified modeling language},
  number   = {7},
  pages    = {615--640},
  title    = {{A Feature-based Classification of Model Repair Approaches}},
  volume   = {43},
  year     = {2017}
}

@article{wagelaar2010a,
  abstract = {As the application of model transformation becomes increasingly commonplace, the focus is shifting from model transformation languages to the model transformations themselves. The properties of model transformations, such as scalability, maintainability and reusability, have become important. Composition of model transformations allows for the creation of smaller, maintainable and reusable transformation definitions that together perform a larger transformation. This paper focuses on composition for two rule-based model transformation languages: the ATLAS Transformation Language (ATL) and the QVT Relations language. We propose a composition technique called module superimposition that allows for extending and overriding rules in transformation modules. We provide executable semantics as well as a concise and scalable implementation of module superimposition based on ATL.},
  author   = {Wagelaar, Dennis and {Van Der Straeten}, Ragnhild and Deridder, Dirk},
  doi      = {10.1007/s10270-009-0134-3},
  issn     = {1619-1374},
  journal  = {Software {\&} Systems Modeling},
  month    = jun,
  number   = {3},
  pages    = {285--309},
  title    = {{Module superimposition: a composition technique for rule-based model transformation languages}},
  url      = {https://doi.org/10.1007/s10270-009-0134-3},
  volume   = {9},
  year     = {2010}
}

@inproceedings{wagelaar2011a,
  abstract  = {As model transformations have become an integral part of the automated software engineering lifecycle, reuse, modularisation, and composition of model transformations becomes important. One way to compose model transformations is to compose modules of transformation rules, and execute the composition as one transformation (internal composition). This kind of composition can provide fine-grained semantics, as it is part of the transformation language. This paper aims to generalise two internal composition mechanisms for rule-based transformation languages, module import and rule inheritance, by providing executable semantics for the composition mechanisms within a virtual machine. The generality of the virtual machine is demonstrated for different rule-based transformation languages by compiling those languages to, and executing them on this virtual machine. We will discuss how ATL and graph transformations can be mapped to modules and rules inside the virtual machine.},
  address   = {Berlin, Heidelberg},
  author    = {Wagelaar, Dennis and Tisi, Massimo and Cabot, Jordi and Jouault, Fr{\'{e}}d{\'{e}}ric},
  booktitle = {Model Driven Engineering Languages and Systems},
  editor    = {Whittle, Jon and Clark, Tony and K{\"{u}}hne, Thomas},
  isbn      = {978-3-642-24485-8},
  pages     = {623--637},
  publisher = {Springer Berlin Heidelberg},
  title     = {{Towards a General Composition Semantics for Rule-Based Model Transformation}},
  year      = {2011}
}

@inproceedings{stevens2007a,
  abstract  = {We consider the OMG's Queries, Views and Transformations (QVT) standard as applied to the specification of bidirectional transformations between models. We discuss what is meant by bidirectional transformations, and the model-driven development scenarios in which they are needed. We analyse the fundamental requirements on tools which support such transformations, and discuss some semantic issues which arise. We argue that a considerable amount of basic research is needed before suitable tools will be fully realisable, and suggest directions for this future research.},
  address   = {Berlin, Heidelberg},
  author    = {Stevens, Perdita},
  booktitle = {Model Driven Engineering Languages and Systems},
  editor    = {Engels, Gregor and Opdyke, Bill and Schmidt, Douglas C and Weil, Frank},
  isbn      = {978-3-540-75209-7},
  pages     = {1--15},
  publisher = {Springer Berlin Heidelberg},
  title     = {{Bidirectional Model Transformations in QVT: Semantic Issues and Open Questions}},
  year      = {2007}
}

