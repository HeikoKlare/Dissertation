- Idee betrachten, dass man auch Funktionen (wie Relationen) konkatenieren und deren Closure betrachten kann. Dann gäbe das einen Multigraphen auf dem man Kompatibilität der Multikanten untersuchen kann
- Visualisierung für Ergebnis von Transformationen im Überlapp der Konsistenzrelationen
- Angeben, dass Consistency Relation Tree eigentlich ein Wald ist
- Bei Partial Consistency Referenz auf stevens2014Partial-FASE angeben: Definiert eine Metrik für den Grad an Konsistenz. Das geht natürlich auch, bedeutet aber eine zusätzliche Funktion, die definiert werden muss. In unserem Fall könnte man sagen, dass die Größe der maximal konsistenten Untermengen diese Funktion induzieren. 
- Bei Partial Consistency Referenz auf stevens2020BidirectionalTransformationLargeSoSym angeben: Definiert partielle Konsistenz als partielle Ordnung, wobei das oberste Element total konsistent ist. Braucht aber dann einen Mechanismus, um diese Ordnung zu traversieren.
- Referenz zu 3.9 aus Max' Diss einbauen (Future Challenges: Propagating Propagations without Cycles, Order of Multi-directional Propagations)
- Todos aktivieren und prüfen
- properdescription: Groß-/Kleinschreibung vereinheitlichen
- Prüfen, dass in allen Formeln die Vorbedingung, dass Modelle konsistent sein müssen (\forall m \in {m \in I_M | m consistent to R}) einheitlich drin steht, entweder über eine Mengeneigenschaft, als Kurzschreibweise "\forall m \in I_m | m consistent to R:" oder als Implikation
- Vereinheitlichen: consistency relation ist normal, transformation is thick

- Related work:
 - Halteproblem Turingmaschine äquivalent zu Terminierung Termersetzung, daher nicht weiter betrachtet (http://hjemmesider.diku.dk/~simonsen/papers/j11.pdf)
 - Konfluenz interessante Eigenschaft von Termersetzungssystemen (siehe auch Church-Rosser-Theorem), aber wir haben diskutiert, warum Konfluenz für Transformationsnetzwerke generell nicht interessant ist.
 - Terminierung von Modelltransformationen, insbesondere auf Graph-Transformationen betrachtet (https://link.springer.com/chapter/10.1007/978-3-540-31984-9_5), allerdings hier Betrachtung der einzelnen Transformationen und bezogen auf Graphgrammatiken, nicht allgemeine Funktionen wie bei uns.

- Grafik zu Algorithmus entsprechend Paper überarbeiten

FINAL:
======

; Stil
- Schriftgröße in Tabellen prüfen / vereinheitlichen
- Prüfen, dass "set" nicht statt "tuple" verwendet wurde (als Wort und in Makros), insbesondere statt "model tuple"
- Prüfen, dass "sequence" und nicht "tuple" verwendet wurde
- Prüfen, dass Rückgabe von Funktionen einheitlich ist (entweder geklammert oder als Tupel)
- Prüfen bzw. ergänzen, dass für alle Glossareinträge bei jeder Verwendung \gls genutzt wird.
- Prüfen, ob in allen Grafiken und im Text in mathematischen Formeln korrekt mathvariable/mathit verwendet wurde
- Groß-/Kleinschreibung in Descriptions/Captions prüfen
- "e.g.", "i.e.", "cf." auf Komma oder escaped Leerzeichen checken
- Prüfen, dass vor \cite{} ein nobreak steht
- Alle optionalen Argumente von cites auf nobreak prüfen [p.~12], [Fig.~2] etc.
- Verwendung von "yet" prüfen

; Inhalt
- Formeln nach Präzedenzregeln prüfen

; Struktur
- Namen für Theoreme/Lemmas/Definitionen etc. prüfen

; Misc
- Mal die owncite ausgeben und prüfen, dass alles richtig zitiert ist und dass wirklich alle eigenen Arbeiten drin sind
- CAMERA-READY: Descriptions für alle Grafiken für Barrierefreiheit